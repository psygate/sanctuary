/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.sanctuary.db.model.tables;


import com.psygate.minecraft.spigot.sovereignty.nucleus.sql.util.UUIDByteConverter;
import com.psygate.minecraft.spigot.sovereignty.sanctuary.db.model.Keys;
import com.psygate.minecraft.spigot.sovereignty.sanctuary.db.model.Nucleus;
import com.psygate.minecraft.spigot.sovereignty.sanctuary.db.model.tables.records.SanctuaryAnchorsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SanctuaryAnchors extends TableImpl<SanctuaryAnchorsRecord> {

	private static final long serialVersionUID = -730263888;

	/**
	 * The reference instance of <code>nucleus.sanctuary_anchors</code>
	 */
	public static final SanctuaryAnchors SANCTUARY_ANCHORS = new SanctuaryAnchors();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SanctuaryAnchorsRecord> getRecordType() {
		return SanctuaryAnchorsRecord.class;
	}

	/**
	 * The column <code>nucleus.sanctuary_anchors.sanctuary_id</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, Long> SANCTUARY_ID = createField("sanctuary_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sanctuary_anchors.creation_time</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, Timestamp> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>nucleus.sanctuary_anchors.creator</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, UUID> CREATOR = createField("creator", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.sanctuary_anchors.group_id</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, Long> GROUP_ID = createField("group_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sanctuary_anchors.health</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, Long> HEALTH = createField("health", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sanctuary_anchors.max_health</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, Long> MAX_HEALTH = createField("max_health", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sanctuary_anchors.x</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, Integer> X = createField("x", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sanctuary_anchors.y</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, Integer> Y = createField("y", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sanctuary_anchors.z</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, Integer> Z = createField("z", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sanctuary_anchors.world_uuid</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, UUID> WORLD_UUID = createField("world_uuid", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.sanctuary_anchors.sanctuary_name</code>.
	 */
	public final TableField<SanctuaryAnchorsRecord, String> SANCTUARY_NAME = createField("sanctuary_name", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

	/**
	 * Create a <code>nucleus.sanctuary_anchors</code> table reference
	 */
	public SanctuaryAnchors() {
		this("sanctuary_anchors", null);
	}

	/**
	 * Create an aliased <code>nucleus.sanctuary_anchors</code> table reference
	 */
	public SanctuaryAnchors(String alias) {
		this(alias, SANCTUARY_ANCHORS);
	}

	private SanctuaryAnchors(String alias, Table<SanctuaryAnchorsRecord> aliased) {
		this(alias, aliased, null);
	}

	private SanctuaryAnchors(String alias, Table<SanctuaryAnchorsRecord> aliased, Field<?>[] parameters) {
		super(alias, Nucleus.NUCLEUS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SanctuaryAnchorsRecord, Long> getIdentity() {
		return Keys.IDENTITY_SANCTUARY_ANCHORS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SanctuaryAnchorsRecord> getPrimaryKey() {
		return Keys.KEY_SANCTUARY_ANCHORS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SanctuaryAnchorsRecord>> getKeys() {
		return Arrays.<UniqueKey<SanctuaryAnchorsRecord>>asList(Keys.KEY_SANCTUARY_ANCHORS_PRIMARY, Keys.KEY_SANCTUARY_ANCHORS_X);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SanctuaryAnchors as(String alias) {
		return new SanctuaryAnchors(alias, this);
	}

	/**
	 * Rename this table
	 */
	public SanctuaryAnchors rename(String name) {
		return new SanctuaryAnchors(name, null);
	}
}
